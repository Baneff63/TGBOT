import os
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
import requests
import logging

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
YANDEX_DISK_TOKEN = os.getenv("YANDEX_DISK_TOKEN")
COMPANY_GROUP_ID = int(os.getenv("COMPANY_GROUP_ID"))

YANDEX_DISK_API_URL = "https://cloud-api.yandex.net/v1/disk/resources"

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–æ–º ===
def check_folder_exists(order_number):
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞: {order_number}")
    headers = {"Authorization": f"OAuth {YANDEX_DISK_TOKEN}"}
    response = requests.get(f"{YANDEX_DISK_API_URL}?path={order_number}", headers=headers)
    if response.status_code == 200:
        logger.info(f"–ü–∞–ø–∫–∞ {order_number} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    else:
        logger.warning(f"–ü–∞–ø–∫–∞ {order_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    return response.status_code == 200


def upload_to_yandex_disk(order_number, file_path, file_name):
    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª {file_name} –≤ –ø–∞–ø–∫—É {order_number} –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫.")
    headers = {"Authorization": f"OAuth {YANDEX_DISK_TOKEN}"}
    response = requests.get(
        f"{YANDEX_DISK_API_URL}/upload?path={order_number}/{file_name}&overwrite=true",
        headers=headers
    )
    if response.status_code == 200:
        upload_url = response.json().get("href")
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {upload_url}")
        with open(file_path, "rb") as f:
            upload_response = requests.put(upload_url, files={"file": f})
            if upload_response.status_code == 201:
                logger.info(f"–§–∞–π–ª {file_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {file_name}: {upload_response.status_code}")
    else:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {file_name}.")
    return False


# === –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.username} –Ω–∞—á–∞–ª –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑.")
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤. –ù–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É', –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É", callback_data="finish_media")],
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
        ])
    )
    context.user_data['state'] = 'MEDIA'
    context.user_data['media'] = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤


async def handle_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('state') != 'MEDIA':
        logger.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø—ã—Ç–∞–ª—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è 'MEDIA'.")
        return

    media_file = None
    file_extension = None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ
    if update.message.photo:
        media_file = update.message.photo[-1]
        file_extension = "jpg"
    elif update.message.video:
        media_file = update.message.video
        file_extension = "mp4"

    if media_file is None:
        logger.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏–ª –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.")
        await update.message.reply_text("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
    file = await context.bot.get_file(media_file.file_id)
    file_path = f"temp_{update.message.chat_id}_{len(context.user_data['media']) + 1}.{file_extension}"
    await file.download_to_drive(file_path)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ —Å–ø–∏—Å–æ–∫
    context.user_data['media'].append(file_path)
    logger.info(f"–§–∞–π–ª {file_path} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞.")
    await update.message.reply_text("–§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω —Ñ–∞–π–ª –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É.")


async def finish_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if not context.user_data.get('media'):
        logger.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É', –Ω–µ –¥–æ–±–∞–≤–∏–≤ –º–µ–¥–∏–∞.")
        await query.message.reply_text("–í—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª.")
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –∑–∞–≥—Ä—É–∑–∫—É –º–µ–¥–∏–∞. –§–∞–π–ª—ã: {context.user_data['media']}")
    context.user_data['state'] = 'ORDER_NUMBER'
    await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")


async def handle_order_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('state') != 'ORDER_NUMBER':
        return

    order_number = update.message.text
    if not check_folder_exists(order_number):
        await update.message.reply_text("–ü–∞–ø–∫–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.")
        return

    logger.info(f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω: {order_number}")
    context.user_data['order_number'] = order_number
    context.user_data['state'] = 'CONFIRM'
    await update.message.reply_text(
        "–í—Å—ë –ø—Ä–æ—à–ª–æ —Ö–æ—Ä–æ—à–æ?",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–î–∞", callback_data="yes"), InlineKeyboardButton("–ù–µ—Ç", callback_data="no")]
        ])
    )


async def handle_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    context.user_data['success'] = query.data  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç "yes" –∏–ª–∏ "no"
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {'—É—Å–ø–µ—à–Ω–æ' if query.data == 'yes' else '–Ω–µ—É—Å–ø–µ—à–Ω–æ'}.")
    context.user_data['state'] = 'COMMENT'
    await query.message.reply_text("–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–µ—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—á–µ—Ä–∫):")


async def handle_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('state') != 'COMMENT':
        return

    context.user_data['comment'] = update.message.text
    context.user_data['state'] = 'FINISHED'

    logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –Ω–∞—á–∞—Ç–∞.")
    order_number = context.user_data['order_number']
    media_paths = context.user_data['media']

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
    for idx, media_path in enumerate(media_paths):
        upload_successful = upload_to_yandex_disk(order_number, media_path, os.path.basename(media_path))
        if not upload_successful:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ {idx + 1}: {media_path}")
        os.remove(media_path)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

    logger.info("–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ –≤ –≥—Ä—É–ø–ø—É.")
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
    success_message = "–î–∞" if context.user_data['success'] == "yes" else "–ù–µ—Ç"
    report_caption = (
        f"üìã **–ù–æ–≤—ã–π –æ—Ç—á—ë—Ç –æ –∑–∞–∫–∞–∑–µ**:\n"
        f"üì¶ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_number}\n"
        f"‚úÖ –í—Å—ë –ø—Ä–æ—à–ª–æ —Ö–æ—Ä–æ—à–æ: {success_message}\n"
        f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {context.user_data['comment']}"
    )
    await context.bot.send_message(chat_id=COMPANY_GROUP_ID, text=report_caption)

    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
    context.user_data.clear()
    logger.info("–û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω—ã.")
    await update.message.reply_text(
        "–û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –•–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑?",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑", callback_data="restart")]])
    )

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await start(update, context)


# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥
def main():
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.PHOTO | filters.VIDEO, handle_media))
    application.add_handler(CallbackQueryHandler(finish_media, pattern="^finish_media$"))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^\d+$'), handle_order_number))
    application.add_handler(CallbackQueryHandler(handle_confirm, pattern="^(yes|no)$"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_comment))
    application.add_handler(CallbackQueryHandler(restart, pattern="^restart$"))

    application.run_polling()


if __name__ == "__main__":
    main()
